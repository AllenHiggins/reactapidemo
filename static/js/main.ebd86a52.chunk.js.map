{"version":3,"sources":["reducers/reducers.jsx","reducers/searchReducer.jsx","store/store.jsx","components/searchComponent/search.jsx","components/imageComponent/imageList.jsx","components/movieComponent/movie.jsx","components/movieComponent/movieList.jsx","components/filmComponent/films.jsx","containers/mainComponent/Main.jsx","actions/searchActions.jsx","App.js","serviceWorker.js","index.js"],"names":["reducers","combineReducers","searchReducer","state","arguments","length","undefined","title","apiEndPoint","images","films","imageTypes","filmTypes","action","type","Object","objectSpread","payload","store","createStore","applyMiddleware","thunk","logger","Search","props","searchForTile","handleApiChoiceChange","handleQuickSearch","shortlist","react_default","a","createElement","className","FormGroup","FormControl","placeholder","onChange","value","style","marginTop","ButtonToolbar","ToggleButtonGroup","name","defaultValue","ToggleButton","onClick","map","Button","key","ImageList","img","Col","sx","id","tags","user","src","largeImageURL","alt","width","hieght","Movie","posterpath","concat","overview","MovieList","filmlist","film","movie","count","poster_path","Films","movieList","Main","event","userTitle","target","_this","setSearchTitle","searchBar","searchGetImagesList","searchFilmList","whichList","endpiont","choice","setApiEndPiont","_this$props$searchBar","this","list","Grid","fluid","Row","Navbar","Header","xs","Brand","color","searchComponent_search","imageComponent_imageList","filmComponent_films","filmTitle","Component","connect","dispatch","axios","get","then","res","data","hits","catch","err","console","log","URL","results","error","filmGetListByTitle","App","mainComponent_Main","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebd86a52.chunk.js","sourcesContent":["import {combineReducers} from 'redux'\n\nimport {searchReducer} from './searchReducer'\n\nexport const reducers = combineReducers({\n    searchReducer\n})","export const searchReducer = (state = {\n    title:'',\n    apiEndPoint: 'Images',\n    images: [],\n    films: [],\n    imageTypes: [\n        'Pets',\n        'Life',\n        'Cute',\n        'Happy',\n        'Heart',\n        'Painting'\n    ],\n    filmTypes: [\n        'Action',\n        'Fantasy',\n        'Adventure',\n        'Comedy',\n        'Crime',\n        'Drama'\n    ]\n}, action) => {\n    switch(action.type){\n        case 'SEARCH_SET_TITLE':\n            return{\n                ...state,\n                title: action.payload\n            }\n        case 'SEARCH_SET_APIENDPOINT':\n            return {\n                ...state,\n                apiEndPoint: action.payload\n            }\n        case 'SEARCH_IMAGES_LIST':\n            return{\n                ...state,\n                images: action.payload\n            }\n        case 'SEARCH_FILM_LIST':\n            return {\n                ...state,\n                films: action.payload\n            }\n        default:\n            return state\n    }\n}","import {createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport logger from 'redux-logger'\n\nimport {reducers} from '../reducers/reducers'\n\nexport const store = createStore(reducers, {}, applyMiddleware(thunk,logger))\n\n","import React from 'react'\nimport {\n    FormControl, \n    FormGroup, \n    Button, \n    ButtonToolbar, \n    ToggleButtonGroup, \n    ToggleButton\n} from 'react-bootstrap'\n\nimport './search.css'\n\nconst Search = (props) => {\n    \n    const {\n        searchForTile,\n        title,\n        handleApiChoiceChange,\n        handleQuickSearch,\n        shortlist\n    } = props\n\n    return (\n        <div className=\"search\">\n            <FormGroup> \n                <FormControl \n                    type=\"text\" \n                    placeholder=\"Search\"\n                    onChange={searchForTile} \n                    value={title} \n                    style={{marginTop: 20}}/></FormGroup>\n\n            <ButtonToolbar>\n                <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue='Images'>\n                <ToggleButton \n                    className=\"search-api-endpoint\" \n                    onClick={handleApiChoiceChange} \n                    value='Images'>Images</ToggleButton>\n                <ToggleButton  \n                    className=\"search-api-endpoint\" \n                    onClick={handleApiChoiceChange} \n                    value='Films'>Films</ToggleButton>\n                </ToggleButtonGroup>\n            </ButtonToolbar>\n            <br />\n            { \n                shortlist.map(type => {\n                    return <Button \n                                className='search-quickPick' \n                                key={type} \n                                onClick={handleQuickSearch} \n                                value={type}>{type}</Button>\n                })  \n            }\n        </div>\n    )\n}\n\nexport default Search","import React from 'react'\nimport {Col} from 'react-bootstrap'\nimport './imageList.css'\n\nconst ImageList = (props) => {\n    return (\n        <div>\n            {props.images.map(img => (\n                <Col sx={12} key={img.id}>\n                    <div className='imagelist'>\n                        <h3>{img.tags}</h3>\n                        <span>\n                            by: <strong>{img.user}</strong>\n                        </span>\n                        <img src={img.largeImageURL} alt={img.user} style={{width: '100%', hieght: '100%'}}/>\n                    </div>\n                    <hr />\n                </Col>\n            ))}\n        </div>\n    )\n}\n  \nexport default ImageList;\n","import React from 'react'\n\nconst Movie = (props) => {\n    return (\n        <table> \n          <tbody>\n            <tr>\n                <td>\n                    {props.posterpath === null \n                        ? <img width=\"100\" src=\"Movies-icon.png\" alt=\"No Poster\" /> \n                        : <img width=\"100\" src={`https://image.tmdb.org/t/p/w185/${props.posterpath}`} alt=\"Poster\"/>\n                    } \n                </td>\n                <td>\n                    <h3>{props.title}</h3>\n                    <p>{props.overview}</p>\n                </td>\n            </tr>\n          </tbody>\n        </table>\n    )\n}\n\nexport default Movie","import React from 'react'\nimport Movie from './movie'\n\nconst MovieList = (props) => {\n    \n    const { filmlist } = props\n    let count = 0\n    return ( \n        filmlist.map( film => {    \n            return (\n                <div key={film.id}>\n                    <Movie \n                        count={count}\n                        title={film.title}\n                        posterpath={film.poster_path}\n                        overview= {film.overview}/>\n                    <hr />\n                </div>\n            )\n        })\n    )\n}\n\nexport default MovieList;","import React from 'react'\n\nimport MovieList from '../movieComponent/movieList'\nimport './film.css'\n\nconst Films = (props) => {\n    const { filmlist } =  props \n   \n    return (\n      <div className=\"Films\">\n        <MovieList filmlist={filmlist}/>\n      </div>\n    );\n}\n\nexport default Films;","import React, {Component} from 'react'\n\nimport { connect } from 'react-redux'\nimport {\n    setSearchTitle, \n    setApiEndPiont,  \n    searchGetImagesList,\n    filmGetListByTitle\n}from '../../actions/searchActions'\n\nimport {Navbar, Grid, Row, Col} from 'react-bootstrap'\nimport Search from '../../components/searchComponent/search'\nimport ImageList from '../../components/imageComponent/imageList'\nimport Films from '../../components/filmComponent/films'\n\nclass Main extends Component {\n\n\n    searchForTile = (event) => {\n        \n        let userTitle = event.target.value\n       \n        this.props.setSearchTitle(userTitle)\n        \n        //API Call\n        if(this.props.searchBar.apiEndPoint === 'Images'){\n            this.props.searchGetImagesList(userTitle)\n        }else{\n            this.props.searchFilmList(userTitle)\n        }\n\n    }\n\n    whichList = (endpiont) => {\n        if(endpiont === 'Images'){\n            return this.props.searchBar.imageTypes\n        }else{\n            return this.props.searchBar.filmTypes\n        }\n    }\n\n    handleApiChoiceChange = (event) => {\n        let choice = event.target.value\n        this.props.setApiEndPiont(choice)\n        this.props.setSearchTitle('')\n    }\n\n    handleQuickSearch = (event) => {\n        this.searchForTile(event)\n    }\n\n    render() {\n\n        const {apiEndPoint,title,images,films} = this.props.searchBar\n        const list = this.whichList(this.props.searchBar.apiEndPoint)\n\n        return (\n            <Grid fluid> \n                <Row>\n                    <Navbar>\n                        <Navbar.Header>\n                            <Col xs={12}>\n                                <Navbar.Brand>\n                                    <span style={{color: 'red'}}>{apiEndPoint}</span> Search\n                                </Navbar.Brand>\n                            </Col>\n                        </Navbar.Header>\n                            <Col xs={12}>\n                                <Search \n                                    searchForTile={this.searchForTile}\n                                    handleApiChoiceChange={this.handleApiChoiceChange}\n                                    handleQuickSearch={this.handleQuickSearch}\n                                    shortlist={list}\n                                    title={title}/>\n                            </Col>\n                    </Navbar>\n                </Row>\n                <Row>\n                    {\n                        apiEndPoint === 'Images'\n                        ? \n                           <ImageList images={images}/>\n                        : \n                            <Films\n                                filmTitle={title}\n                                filmlist={films}/>\n                    }       \n                </Row>   \n            </Grid>\n            \n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        searchBar: state.searchReducer\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return{\n        setSearchTitle: (title) => {\n            dispatch(setSearchTitle(title))\n        },\n        setApiEndPiont: (choice) => {\n            dispatch(setApiEndPiont(choice))\n        },\n        searchGetImagesList: (title) => {\n            dispatch(searchGetImagesList(title))\n          },\n        searchFilmList: (title) => {\n            dispatch(filmGetListByTitle(title))\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import axios from 'axios'\n\nexport const setSearchTitle = (title) => {\n    return {\n        type: 'SEARCH_SET_TITLE',\n        payload: title\n    }\n}\n\nexport const setApiEndPiont = (choice) => {\n    return {\n        type: 'SEARCH_SET_APIENDPOINT',\n        payload: choice\n    }\n}\n\n\nexport const searchGetImagesList = (title) => {\n    return(dispatch) => {\n        \n        const apiUrl = 'https://pixabay.com/api'\n        const apiKey = '10361802-d80edd7c8013de8fa58524476'\n\n        axios.get(`${apiUrl}/?key=${apiKey}&q=${title}&image_type=photo&per_page=20&safesearch=true`)\n        .then( res => {\n            dispatch({\n                type: 'SEARCH_IMAGES_LIST',\n                payload:res.data.hits\n            })\n        })\n        .catch( err => console.log(err))\n\n    }\n}\n\nexport const filmGetListByTitle = (title) => {\n    return (dispatch) => {\n\n        const key = 'ad15983bd210a7516df5735e5abb5f4f'\n        const URL = `https://api.themoviedb.org/3/search/movie?query=${title}&api_key=${key}`\n        \n        axios.get(URL)\n        .then( res => {\n              dispatch({\n                type:'SEARCH_FILM_LIST',\n                payload: res.data.results\n            })\n        })\n        .catch( error => {console.log(error)})   \n    }\n}\n\n","import React from 'react';\nimport Main from './containers/mainComponent/Main'\n\nconst App = () => {\n    return (\n      <div className=\"App\">\n        <Main></Main>\n      </div>\n    )\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {store} from './store/store'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}